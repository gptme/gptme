feat: implement comprehensive hook system (#156)

Implements a complete hook system allowing tools to register callbacks at
various lifecycle points. This addresses issue #156 by providing a flexible
extension mechanism without modifying core code.

Features:
- 13 hook types covering message, tool, file, session, and generation events
- Priority-based execution order
- Thread-safe registry
- Enable/disable hooks at runtime
- Error isolation (hook failures don't break execution)
- Generator support for yielding multiple messages

Changes:
- NEW: gptme/hooks.py - Core hook registry and types
- NEW: gptme/tools/precommit.py - Example pre-commit hook tool
- NEW: gptme/tools/todo_replay.py - Todo replay via SESSION_START hook
- NEW: docs/hooks.rst - Complete documentation with examples
- NEW: tests/test_hooks.py - 12 comprehensive tests (all passing)
- MODIFIED: gptme/tools/base.py - Added hooks field to ToolSpec
- MODIFIED: gptme/tools/__init__.py - Register hooks on tool load
- MODIFIED: gptme/chat.py - Added hook triggers, removed hard-coded todowrite replay
- MODIFIED: gptme/tools/save.py - Added FILE_PRE_SAVE and FILE_POST_SAVE hooks
- MODIFIED: docs/index.rst - Added hooks to developer guide

Examples:

Tool with hooks:
```python
tool = ToolSpec(
    name="linter",
    hooks={
        "lint": (HookType.FILE_POST_SAVE.value, lint_function, 10)
    }
)
```

Programmatic registration:
```python
register_hook("my_hook", HookType.MESSAGE_PRE_PROCESS, my_function)
```

Testing:
- 12/12 tests passing
- Type checking passes (mypy)
- No breaking changes to existing functionality

Documentation:
- Complete user guide in docs/hooks.rst
- API reference with examples
- Migration guide for converting features to hooks
- Best practices and thread safety notes

Closes #156
